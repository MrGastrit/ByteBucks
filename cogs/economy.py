from discord.ext import commands
from discord import app_commands, SelectOption
from utils.database import *
from datetime import datetime, timedelta, timezone
from ui.views import *

import psycopg2
import discord
import os
from dotenv import load_dotenv

load_dotenv("important.env")


conn = psycopg2.connect(user=os.getenv("USER"), password=os.getenv("DB_PASS"), host="localhost", port="5432", database=os.getenv("DATABASE"))
cursor = conn.cursor()


class EconomyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="shop", description="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    @app_commands.checks.has_permissions(send_messages=True)
    async def shop(self, interaction: discord.Interaction):
        async def handle_purchase_accept(interaction: discord.Interaction, options, product):
            label = next((opt.label for opt in options if opt.value == product), product)

            splited = label.split(" - ")
            price = splited[1].replace(" ", "")

            if get_balance(interaction.user.id) >= int(price):
                set_balance(interaction.user.id, get_balance(interaction.user.id) - int(price))
                await interaction.response.edit_message(content="üõí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!", view=None)

                add_item(interaction.user.id, product)
            else:
                await interaction.response.edit_message(content="üí≥ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π, –ø–æ—Ç–æ–º –ø—Ä–∏—Ö–æ–¥–∏.", view=None)

        async def handle_product_selection(interaction: discord.Interaction, options, product: str):
            label = next((opt.label for opt in options if opt.value == product), product)

            splited = label.split(" - ")

            await interaction.response.send_message(f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {splited[0]}\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", view=ButtonView("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", options, product, handle_purchase_accept, discord.ButtonStyle.success), ephemeral=True)

        async def handle_selection(interaction: discord.Interaction, options, selected: str):
            if selected == "electronics":
                embed = discord.Embed(description="## –ö–∞—Ç–µ–≥–æ—Ä–∏—è - __üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞__", color=discord.Color.dark_teal())
                options = [
                    SelectOption(label="üé• –ö–∞–º–µ—Ä–∞ - 15999", value="camera"),
                    SelectOption(label="üíª –ù–æ—É—Ç–±—É–∫ ASAS - 49500", value="laptop"),
                    SelectOption(label="üíª Macback Air M4 Pro - 119000", value="laptop"),
                    SelectOption(label="üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω - 11999", value="phone"),
                    SelectOption(label="ü™´ –ü–æ–≤–µ—Ä–±–∞–Ω–∫ - 2199", value="powerbank"),
                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", options, handle_product_selection))

            elif selected == "sports":
                embed = discord.Embed(description="## –ö–∞—Ç–µ–≥–æ—Ä–∏—è - __üö¥ –°–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã__", color=discord.Color.dark_teal())
                options = [
                    SelectOption(label="üëü –ë–µ–≥–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ - 3990", value="boots"),
                    SelectOption(label="üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥ - 13999", value="bicycle"),
                    SelectOption(label="ü•§ –ë—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã - 255", value="waterbottle"),
                    SelectOption(label="üìú –ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª - 4799", value="gymmembership"),
                    SelectOption(label="‚öΩ –ú—è—á - 1870", value="ball"),
                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", options, handle_product_selection))

            elif selected == "office":
                embed = discord.Embed(description="## –ö–∞—Ç–µ–≥–æ—Ä–∏—è - __üñãÔ∏è –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è__", color=discord.Color.dark_teal())
                options = [
                    SelectOption(label="üñãÔ∏è –†—É—á–∫–∞ - 199", value="pen"),
                    SelectOption(label="üñåÔ∏è –ö–∏—Å—Ç—å - 990", value="brush"),
                    SelectOption(label="‚úèÔ∏è –ö–∞—Ä–∞–Ω–¥–∞—à - 89", value="pencil"),
                    SelectOption(label="üñäÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä—É—á–∫–∞ - 9990", value="bestpen"),
                    SelectOption(label="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã - 279", value="scissors"),
                    SelectOption(label="üìÉ –•–æ–ª—Å—Ç - 3260", value="canvas"),
                    SelectOption(label="üé® –ö—Ä–∞—Å–∫–∏ - 4890", value="paints"),
                    SelectOption(label="üìñ –ü—É—Å—Ç–∞—è –∫–Ω–∏–≥–∞ - 875", value="emptybook"),

                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", options, handle_product_selection))

            elif selected == "tools":
                embed = discord.Embed(description="## –ö–∞—Ç–µ–≥–æ—Ä–∏—è - __üî® –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã__", color=discord.Color.dark_teal())
                options = [
                    SelectOption(label="üß∞ –ù–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - 4850", value="toolset"),
                    SelectOption(label="ü•º –†–∞–±–æ—á–∞—è —Ñ–æ—Ä–º–∞ - 5149", value="uniform"),
                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", options, handle_product_selection))

            elif selected == "fun":
                embed = discord.Embed(description="## –ö–∞—Ç–µ–≥–æ—Ä–∏—è - __üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è__", color=discord.Color.dark_teal())
                options = [
                    SelectOption(label="üéÆ –ò–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å - 52500", value="console"),
                    SelectOption(label="üÉè –ò–≥—Ä–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã - 229", value="cards"),
                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", options, handle_product_selection))

            elif selected == "other":
                embed = discord.Embed(description="## –ö–∞—Ç–µ–≥–æ—Ä–∏—è - __üóø –î—Ä—É–≥–æ–µ__", color=discord.Color.dark_teal())
                options = [
                    SelectOption(label='‚åö –ß–∞—Å—ã "RoleRx" - 1 675 000', value="rolerx"),
                    SelectOption(label='üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å "Royce Royce" - 7 490 000', value="royce"),
                    SelectOption(label="üè° –î–æ–º –≤ –≥–æ—Ä–∞—Ö - 24 700 000", value="house"),
                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", options, handle_product_selection))

        embed = discord.Embed(title="–ú–∞–≥–∞–∑–∏–Ω", description="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –≤—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ (–ø–æ—á—Ç–∏ –≤—Å—ë)", color=discord.Color.dark_teal())
        options = [
            SelectOption(label="üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", value="electronics"),
            SelectOption(label="üö¥ –°–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã", value="sports"),
            SelectOption(label="üñãÔ∏è –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è", value="office"),
            SelectOption(label="üî® –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", value="tools"),
            SelectOption(label="üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", value="fun"),
            SelectOption(label="üóø –î—Ä—É–≥–æ–µ", value="other"),
        ]
        await interaction.response.send_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤", options, handle_selection))


    @app_commands.command(name="works", description="–¶–µ–Ω—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏")
    @app_commands.checks.has_permissions(send_messages=True)
    async def works(self, interaction: discord.Interaction):
        async def handle_prof_accept(interaction: discord.Interaction, options, prof):
            label = next((opt.label for opt in options if opt.value == prof), prof)

            match prof:
                case "artist" | "writer" | "mechanic" | "programmer" | "blogger":
                    await try_set_job(interaction, prof, label)


        async def handle_prof_selection(interaction: discord.Interaction, options, product: str):
            label = next((opt.label for opt in options if opt.value == product), product)

            await interaction.response.send_message(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {label}\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", view=ButtonView("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", options, product, handle_prof_accept, discord.ButtonStyle.success), ephemeral=True)

        async def handle_selection(interaction: discord.Interaction, options, selected: str):
            embed = discord.Embed(title="", description="## –¶–µ–Ω—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è \n ### ü§ù –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Å –≤–∞–∫–∞–Ω—Å–∏—é", color=discord.Color.dark_gold())

            if selected == "fornews":
                options = [
                    SelectOption(label="üö∂ –ö—É—Ä—å–µ—Ä", value="courier"),
                    SelectOption(label="üßπ –£–±–æ—Ä—â–∏–∫", value="cleaner"),
                    SelectOption(label="üçî –†–∞–±–æ—Ç–Ω–∏–∫ —Ñ–∞—Å—Ç—Ñ—É–¥–∞", value="fastfood"),
                    SelectOption(label="üì¶ –ì—Ä—É–∑—á–∏–∫", value="loader"),
                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É", options, handle_prof_selection))

            elif selected == "preparation":
                options = [
                    SelectOption(label="üé® –•—É–¥–æ–∂–Ω–∏–∫", value="artist"),
                    SelectOption(label="‚úçÔ∏è –ü–∏—Å–∞—Ç–µ–ª—å", value="writer"),
                    SelectOption(label="üîß –ú–µ—Ö–∞–Ω–∏–∫", value="mechanic"),
                    SelectOption(label="üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", value="programmer"),
                    SelectOption(label="üìπ –í–∏–¥–µ–æ–±–ª–æ–≥–µ—Ä", value="blogger"),
                ]
                await interaction.response.edit_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É", options, handle_prof_selection))



        embed = discord.Embed(title="", description="## –¶–µ–Ω—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è \n ### ü§ù –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É", color=discord.Color.dark_gold())
        options = [
            SelectOption(label="üö∂ –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤", value="fornews"),
            SelectOption(label="üìã –¢—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", value="preparation")
        ]

        await interaction.response.send_message(embed=embed, view=DropdownView("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", options, handle_selection))


        JOB_REQUIREMENTS = {
            "artist": ["paints", "canvas", "brush"],
            "writer": ["emptybook", "pen"],
            "mechanic": ["toolset", "uniform"],
            "programmer": ["laptop"],
            "blogger": ["camera"],
        }

        async def try_set_job(interaction: discord.Interaction, prof, label):
            if not get_need_items(interaction.user.id, JOB_REQUIREMENTS[prof]):
                await interaction.response.edit_message(content="–£ –≤–∞—Å –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤", view=None)
                return
            if get_job(interaction.user.id) is not None:
                await interaction.response.edit_message(content="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞!", view=None)
                return

            set_job(interaction.user.id, prof)
            await interaction.response.edit_message(content=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É: {label}", view=None)


async def setup(bot):
    await bot.add_cog(EconomyCog(bot))
