from discord.ext import commands
from discord import app_commands, SelectOption
from utils.database import *
from datetime import datetime, timedelta, timezone
from ui.views import *

import psycopg2
import discord


JOBS_NAMES = {
    "courier": "üö∂ –ö—É—Ä—å–µ—Ä",
    "cleaner": "üßπ –£–±–æ—Ä—â–∏–∫",
    "fastfood": "üçî –†–∞–±–æ—Ç–Ω–∏–∫ —Ñ–∞—Å—Ç—Ñ—É–¥–∞",
    "loader": "üì¶ –ì—Ä—É–∑—á–∏–∫",

    "artist": "üé® –•—É–¥–æ–∂–Ω–∏–∫",
    "writer": "‚úçÔ∏è –ü–∏—Å–∞—Ç–µ–ª—å",
    "mechanic": "üîß –ú–µ—Ö–∞–Ω–∏–∫",
    "programmer": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
    "blogger": "üìπ –í–∏–¥–µ–æ–±–ª–æ–≥–µ—Ä",
}


class UserActions(commands.Cog):
    @app_commands.command(name="start", description="–ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å")
    @app_commands.checks.has_permissions(send_messages=True)
    async def start(self, interaction: discord.Interaction):
        cursor.execute("SELECT 1 FROM users WHERE id = %s", (interaction.user.id,))
        result = cursor.fetchone()

        if result is None:
            cursor.execute("INSERT INTO users (id, balance) VALUES (%s, %s)", (interaction.user.id, 0,))
            await interaction.response.send_message("–í—ã —Å–æ–∑–¥–∞–ª–∏ —Ç—Ä—É–¥–æ–≤—É—é –∫–Ω–∏–≥—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–µ–Ω—å–≥–∏", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–≥–∞!", ephemeral=True)

        conn.commit()


    @app_commands.command(name="balance", description="–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å")
    @app_commands.checks.has_permissions(send_messages=True)
    async def balance(self, interaction: discord.Interaction):
        await interaction.response.send_message(f"–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {get_balance(interaction.user.id)}", ephemeral=True)


    @app_commands.command(name="job", description="–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ")
    @app_commands.checks.has_permissions(send_messages=True)
    async def job(self, interaction: discord.Interaction):
        if get_job(interaction.user.id) is None:
            await interaction.response.send_message("–í—ã –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π!", ephemeral=True)
        else:
            await interaction.response.send_message(f"–í–∞—à–∞ –Ω—ã–Ω–µ—à–Ω—è—è —Ä–∞–±–æ—Ç–∞: {JOBS_NAMES[get_job(interaction.user.id)]}", ephemeral=True)


    @app_commands.command(name="dismiss", description="–£–≤–æ–ª–∏—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã")
    @app_commands.checks.has_permissions(send_messages=True)
    async def dismiss(self, interaction: discord.Interaction):
        async def dismiss_callback(interaction: discord.Interaction, options, prof):
            await interaction.response.edit_message(content="–í—ã —É–≤–æ–ª–∏–ª–∏—Å—å! –¢–µ–ø–µ—Ä—å –≤—ã –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π", view=None)
            set_job(interaction.user.id, None)

        await interaction.response.send_message(content="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–æ–ª–∏—Ç—å—Å—è?", view=ButtonView("–£–≤–æ–ª–∏—Ç—å—Å—è", [], "", dismiss_callback, discord.ButtonStyle.danger), ephemeral=True)


    @app_commands.command(name="balance", description="–£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å")
    @app_commands.checks.has_permissions(send_messages=True)
    async def balance(self, interaction: discord.Interaction):
        try:
            word = plural(str(get_balance(interaction.user.id)).split(".")[0], ["–¥–æ–ª–ª–∞ÃÅ—Ä", "–¥–æ–ª–ª–∞ÃÅ—Ä–∞", "–¥–æ–ª–ª–∞ÃÅ—Ä–æ–≤"])
            if get_balance(interaction.user.id) < 1000000:
                await interaction.response.send_message(f"–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {get_balance(interaction.user.id)} {word}", ephemeral=True)
            else:
                await interaction.response.send_message(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {interaction.user.mention} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {get_balance(interaction.user.id)} {word}")
        except Exception as e:
            print(e)

async def setup(bot):
    await bot.add_cog(UserActions(bot))



def plural(n, forms):
    n = abs(int(n)) % 100
    n1 = n % 10
    if 11 <= n <= 19:
        return forms[2]
    if 1 == n1:
        return forms[0]
    if 2 <= n1 <= 4:
        return forms[1]
    return forms[2]